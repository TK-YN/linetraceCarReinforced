<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- パス設定 -->
  <let name="urdf_path" value="$(find-pkg-share robot_desc)/urdf/linetrace.urdf.xacro" />
  <let name="rviz_config_path" value="$(find-pkg-share robot_desc)/rviz/urdf_config.rviz" />
  <let name="gazebo_config_path" value="$(find-pkg-share robot_desc)/config/gazebo_bridge.yaml" />
  <let name="controllers_config_path" value="$(find-pkg-share robot_desc)/config/wheel_controllers.yaml" />
  
  <!-- Robot State Publisher -->
  <node pkg="robot_state_publisher" exec="robot_state_publisher" output="screen">
    <param name="robot_description" value="$(command 'xacro $(var urdf_path)')" />
    <param name="use_sim_time" value="true" />
  </node>
  
  <!-- robot_descriptionをrobot_descにリレー -->
  <node pkg="topic_tools" exec="relay" output="screen"
        args="/robot_description /robot_desc" />
  
  <!-- Gazeboシミュレーション -->
  <include file="$(find-pkg-share ros_gz_sim)/launch/gz_sim.launch.py">
    <!-- -r 引数は維持しても削除しても構いません。
         ground_planeのエラーが気になる場合は削除してください。 -->
    <arg name="gz_args" value="$(find-pkg-share robot_desc)/worlds/line_world.sdf -r" /> 
  </include>
  
  <!-- 少し待ってからロボットをスポーン -->
  <node pkg="ros_gz_sim" exec="create"
        args="-topic robot_desc -name linetrace_robot -x -0.22 -y -0.332 -z 0.1 -Y 1.54"
        output="screen" />
  
  <!-- ROS-Gazeboブリッジ（基本トピック用） -->
  <node pkg="ros_gz_bridge" exec="parameter_bridge" output="screen">
    <param name="config_file" value="$(var gazebo_config_path)" />
  </node>
  
  <!-- 必要なすべてのサービスブリッジを明示的に追加 -->
  <node pkg="ros_gz_bridge" exec="parameter_bridge" output="screen"
        args="/world/empty/remove@ros_gz_interfaces/srv/DeleteEntity
              /world/empty/create@ros_gz_interfaces/srv/SpawnEntity
              /world/empty/set_pose@ros_gz_interfaces/srv/SetEntityPose
              " />
  
  <!-- RViz (必要に応じてコメントアウト解除)
  <node pkg="rviz2" exec="rviz2" output="screen" args="-d $(var rviz_config_path)">
    <param name="use_sim_time" value="true" />
  </node>-->
  
  <!-- Joint State Broadcaster -->
  <node pkg="controller_manager"
        exec="spawner"
        output="screen"
        args="joint_state_broadcaster" />
  
  <!-- Left Wheel Velocity Controller -->
  <node pkg="controller_manager"
        exec="spawner"
        output="screen"
        args="left_wheel_velocity_controller --controller-manager /controller_manager --ros-args --params-file $(var controllers_config_path)" />
  
  <!-- Right Wheel Velocity Controller -->
  <node pkg="controller_manager"
        exec="spawner"
        output="screen"
        args="right_wheel_velocity_controller --controller-manager /controller_manager --ros-args --params-file $(var controllers_config_path)" />
  
</launch>